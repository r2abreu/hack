import rom32k from "./rom32k.ts";
import { assertEquals } from "jsr:@std/assert";

// This test assumes instructions.txt is present and contains at least the following lines:
// 0000000000000010
// 1110110000010000
// 0000000000000011
// 1110000010010000
// 0000000000000000
// 1110001100001000
// 0000000000000101
// 1111110000010000
// 0000000000000110
// 1110000010010000
// 0000000000000001
// 1110001100001000

Deno.test(
  "ROM32K returns correct Hack instructions from instructions.txt (binary numbers)",
  () => {
    const rom = rom32k();

    // Address 0: 0b0000000000000000
    assertEquals(rom(0b0000000000000000), 0b0000000000000010);

    // Address 1: 0b0000000000000001
    assertEquals(rom(0b0000000000000001), 0b1110110000010000);

    // Address 2: 0b0000000000000010
    assertEquals(rom(0b0000000000000010), 0b0000000000000011);

    // Address 3: 0b0000000000000011
    assertEquals(rom(0b0000000000000011), 0b1110000010010000);

    // Address 4: 0b0000000000000100
    assertEquals(rom(0b0000000000000100), 0b0000000000000000);

    // Address 5: 0b0000000000000101
    assertEquals(rom(0b0000000000000101), 0b1110001100001000);

    // Address 6: 0b0000000000000110
    assertEquals(rom(0b0000000000000110), 0b0000000000000101);

    // Address 7: 0b0000000000000111
    assertEquals(rom(0b0000000000000111), 0b1111110000010000);

    // Address 8: 0b0000000000001000
    assertEquals(rom(0b0000000000001000), 0b0000000000000110);

    // Address 9: 0b0000000000001001
    assertEquals(rom(0b0000000000001001), 0b1110000010010000);

    // Address 10: 0b0000000000001010
    assertEquals(rom(0b0000000000001010), 0b0000000000000001);

    // Address 11: 0b0000000000001011
    assertEquals(rom(0b0000000000001011), 0b1110001100001000);
  },
);
