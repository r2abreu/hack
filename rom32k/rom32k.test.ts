import rom32k from "./rom32k.ts";
import { assertEquals } from "jsr:@std/assert";

// This test assumes instructions.txt is present and contains at least the following lines:
// 0000000000000010
// 1110110000010000
// 0000000000000011
// 1110000010010000
// 0000000000000000
// 1110001100001000
// 0000000000000101
// 1111110000010000
// 0000000000000110
// 1110000010010000
// 0000000000000001
// 1110001100001000

Deno.test(
  "ROM32K returns correct Hack instructions from instructions.txt",
  () => {
    const rom = rom32k();

    // Address 0: 0000000000000010
    assertEquals(
      rom([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
      [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    );

    // Address 1: 1110110000010000
    assertEquals(
      rom([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
      [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1],
    );

    // Address 2: 0000000000000011
    assertEquals(
      rom([0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
      [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    );

    // Address 3: 1110000010010000
    assertEquals(
      rom([1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
      [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1],
    );

    // Address 4: 0000000000000000
    assertEquals(
      rom([0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    );

    // Address 5: 1110001100001000
    assertEquals(
      rom([1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
      [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1],
    );

    // Address 6: 0000000000000101
    assertEquals(
      rom([0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
      [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    );

    // Address 7: 1111110000010000
    assertEquals(
      rom([1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
      [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
    );

    // Address 8: 0000000000000110
    assertEquals(
      rom([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
      [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    );

    // Address 9: 1110000010010000
    assertEquals(
      rom([1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
      [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1],
    );

    // Address 10: 0000000000000001
    assertEquals(
      rom([0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    );

    // Address 11: 1110001100001000
    assertEquals(
      rom([1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
      [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1],
    );
  },
);
