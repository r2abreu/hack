import { assertEquals } from "jsr:@std/assert";
import add16 from "./add16.ts";

// 0 + 0 = 0
Deno.test("add16: 0b0000000000000000 + 0b0000000000000000 = 0b0000000000000000", () => {
  assertEquals(
    add16(0b0000000000000000, 0b0000000000000000),
    0b0000000000000000,
  );
});

// 1 + 1 = 2
Deno.test("add16: 0b0000000000000001 + 0b0000000000000001 = 0b0000000000000010", () => {
  assertEquals(
    add16(0b0000000000000001, 0b0000000000000001),
    0b0000000000000010,
  );
});

// 0b0000000000001010 + 0b0000000000000101 = 0b0000000000001111
Deno.test("add16: 0b0000000000001010 + 0b0000000000000101 = 0b0000000000001111", () => {
  assertEquals(
    add16(0b0000000000001010, 0b0000000000000101),
    0b0000000000001111,
  );
});

// 0b1111111111111111 + 0b0000000000000001 = 0b0000000000000000 (overflow)
Deno.test("add16: 0b1111111111111111 + 0b0000000000000001 = 0b0000000000000000", () => {
  assertEquals(
    add16(0b1111111111111111, 0b0000000000000001),
    0b0000000000000000,
  );
});

// 0b1010101010101010 + 0b0101010101010101 = 0b1111111111111111
Deno.test("add16: 0b1010101010101010 + 0b0101010101010101 = 0b1111111111111111", () => {
  assertEquals(
    add16(0b1010101010101010, 0b0101010101010101),
    0b1111111111111111,
  );
});

// 0b1111111111111111 + 0b1111111111111111 = 0b1111111111111110 (carry out ignored)
Deno.test("add16: 0b1111111111111111 + 0b1111111111111111 = 0b1111111111111110", () => {
  assertEquals(
    add16(0b1111111111111111, 0b1111111111111111),
    0b1111111111111110,
  );
});

// 0b1000000000000000 + 0b1000000000000000 = 0b0000000000000000 (overflow)
Deno.test(
  "add16: 0b1000000000000000 + 0b1000000000000000 = 0b0000000000000000",
  () => {
    assertEquals(
      add16(0b1000000000000000, 0b1000000000000000),
      0b0000000000000000,
    );
  },
);
